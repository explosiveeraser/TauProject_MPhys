    def read_tree(self, Tree):
        jet_index = 0
        track_index = 0
        tower_index = 0
        jet_array = []
        track_array = []
        tower_array = []
        label_array = []
        for entry in tqdm(Tree):
            jet_array.append([entry.jet_PT, entry.jet_Eta, entry.jet_Phi, entry.jet_deltaEta, entry.jet_deltaPhi,
                              entry.jet_charge, entry.jet_NCharged, entry.jet_NNeutral, entry.jet_deltaR,
                              entry.jet_f_cent,
                              entry.jet_iF_leadtrack, entry.jet_max_deltaR, entry.jet_Ftrack_Iso])
            if entry.jet_TruthTau == 1:
                label_array.append(1)
            elif entry.jet_TruthTau == 0:
                label_array.append(0)
            track_index = 0
            tower_index = 0
            nTrack = int(entry.nTrack)
            nTower = int(entry.nTower)
            # TRACK_ARRAY: ['[index]',[P], [PT], [L], [D0], [DZ], [e], [e], [deltaEta], [deltaPhi], [deltaR]]
            inside_tracks = []
            inside_towers = []
            # TOWER_ARRAY: ['[index]',[E], [ET], [Eta], [Phi], [Edges0], [Edges1], [Edges2], [Edges3], [Eem], [Ehad], [T],
            # [deltaEta], [deltaPhi], [deltaR]]
            tr_pt = []
            to_et = []
            for t in range(0, nTrack):
                tr_pt.append(entry.track_PT[t])
            index_sorted_tracks = sorted(range(len(tr_pt)), key=lambda k: tr_pt[k], reverse=True)
            for t in range(0, nTower):
                to_et.append(entry.tower_ET[t])
            index_sorted_towers = sorted(range(len(to_et)), key=lambda k: to_et[k], reverse=True)
            for idx in index_sorted_tracks[0:5]:
                track = np.asarray([entry.track_P[idx], entry.track_PT[idx], entry.track_L[idx], entry.track_D0[idx],
                                    entry.track_DZ[idx], entry.track_deltaEta[idx], entry.track_deltaPhi[idx],
                                    entry.track_deltaR[idx]]).astype('float32')
                inside_tracks.append(track)
                track_index += 1
            for jdx in index_sorted_towers[0:9]:
                tower = np.asarray([entry.tower_E[jdx], entry.tower_ET[jdx], entry.tower_Eta[jdx], entry.tower_Phi[jdx],
                                    entry.tower_Edges0[jdx], entry.tower_Edges1[jdx],
                                    entry.tower_Edges2[jdx], entry.tower_Edges3[jdx], entry.tower_Eem[jdx],
                                    entry.tower_Ehad[jdx], entry.tower_T[jdx], entry.tower_deltaEta[jdx],
                                    entry.tower_deltaPhi[jdx], entry.tower_deltaR[jdx]]).astype('float32')
                inside_towers.append(tower)
                tower_index += 1

            track_array.append(inside_tracks)
            tower_array.append(inside_towers)

            #track_array.append(
               # self.Apply_Logarithm(self.Process_Data(inside_tracks), [True, True, True, True, True, False, False, False]))
            #tower_array.append(self.Apply_Logarithm(self.Process_Data(inside_towers),
                                            #   [True, True, False, False, False, False, False, False, True, True, True,
                                             #   False, False, False]))
            jet_index += 1
            #if jet_index == 3000:
             #   break
        track_array = pad_sequences(track_array, dtype='float32', maxlen=6, padding='post')
        tower_array = pad_sequences(tower_array, dtype='float32', maxlen=10, padding='post')
        jet_array = np.array(jet_array)
       # jet_array = np.array(self.Apply_Logarithm(self.Process_Data(jet_array),
       #                                      [False, False, False, False, False, False, False, False, False, True, True,
        #                                      False, False]))
        track_array = np.array(track_array)
        tower_array = np.array(tower_array)
        label_array = np.array(label_array)
        return jet_array, track_array, tower_array, label_array